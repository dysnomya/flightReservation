package com.katarzynachojniak.staz.flightreservation.passenger;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * REST controller for handling passenger-related operations.
 *
 * <p>Provides endpoints for passenger related operations, including:</p>
 * <ul>
 *     <li>Retrieving all passengers</li>
 *     <li>Fetching a specific passenger by ID</li>
 *     <li>Creating a new passenger</li>
 *     <li>Updating data of existing passenger</li>
 *     <li>Deleting a passenger</li>
 * </ul>
 *
 * <p>Base URL: <code>/passengers</code></p>
 */
@RestController
@RequestMapping("/passengers")
public class PassengerController {

    private final PassengerService passengerService;

    public PassengerController(PassengerService passengerService) {
        this.passengerService = passengerService;
    }

    /**
     * Returns a list of all available passengers
     * @return a list of all available passengers
     */
    @GetMapping
    public List<PassengerDto> getAllPassengers() {
        return passengerService.getAllPassengers();
    }

    /**
     * Creates a new passenger entry.
     * @param passengerDto passenger data sent in request body.
     * @return created passenger with HTTP 201 (Created) status
     */
    @PostMapping
    public ResponseEntity<PassengerDto> createPassenger(@RequestBody PassengerDto passengerDto) {
        return new ResponseEntity<>(passengerService.createPassenger(passengerDto), HttpStatus.CREATED);
    }

    /**
     * Returns passenger details by ID (flight number).
     * @param id passenger's id generated by database
     * @return passenger data if found, or HTTP 404 (Not Found)
     */
    @GetMapping("/{id}")
    public ResponseEntity<PassengerDto> getPassengerById(@PathVariable Long id) {
        PassengerDto passengerDto = passengerService.getPassengerDtoById(id);

        if (passengerDto != null) {
            return ResponseEntity.ok(passengerDto);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    /**
     * Updates data of existing passenger.
     * @param id passenger's id generated by database
     * @param dto passenger data to update sent in request body
     * @return updated passenger data if found, or HTTP 404 (Not Found)
     */
    @PutMapping("/{id}")
    public ResponseEntity<PassengerDto> updatePassenger(@PathVariable Long id, @RequestBody PassengerDto dto) {

        PassengerDto passengerDto = passengerService.updatePassenger(id, dto);

        if (passengerDto != null) {
            return ResponseEntity.ok(passengerDto);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    /**
     * Deletes a passenger by ID.
     * @param id passenger's id generated by database
     * @return HTTP 204 (No Content) whether or not the flight existed
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deletePassenger(@PathVariable Long id) {
        passengerService.deletePassenger(id);
        return ResponseEntity.noContent().build();
    }
}
