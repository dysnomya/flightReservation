package com.katarzynachojniak.staz.flightreservation.reservation;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * REST controller for managing reservations in the flight reservation system.
 *
 * <p>Provides endpoints for reservation-related operations, including:</p>
 * <ul>
 *     <li>Retrieving all reservations</li>
 *     <li>Creating a new reservation</li>
 *     <li>Fetching a specific reservation by ID</li>
 *     <li>Updating existing reservation data</li>
 *     <li>Deleting a reservation</li>
 * </ul>
 *
 * <p>Base URL: <code>/reservations</code></p>
 */
@RestController
@RequestMapping("/reservations")
public class ReservationController {

    private final ReservationService reservationService;

    public ReservationController(ReservationService reservationService) {
        this.reservationService = reservationService;
    }

    /**
     * Retrieves a list of all reservations.
     * @return list of all reservations
     */
    @GetMapping
    public List<ReservationDto> getAllReservations() {
        return  reservationService.getAllReservations();
    }

    /**
     * Creates a new reservation using provided flight, seat, and passenger data.
     * @param reservationCreateDto DTO containing details for the new reservation
     * @return created reservation with HTTP 201 (Created) status
     */
    @PostMapping
    public ResponseEntity<ReservationDto> createReservation(@RequestBody ReservationCreateDto reservationCreateDto) {
        return new ResponseEntity<>(reservationService.createReservation(reservationCreateDto), HttpStatus.CREATED);
    }

    /**
     * Retrieves a reservation by its ID.
     * @param id reservation ID generated by the database
     * @return reservation data if found, or HTTP 404 (Not Found)
     */
    @GetMapping("/{id}")
    public ResponseEntity<ReservationDto> getReservationById(@PathVariable Long id) {
        ReservationDto reservationDto = reservationService.getReservationDtoById(id);

        if (reservationDto != null) {
            return ResponseEntity.ok(reservationDto);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    /**
     * Updates an existing reservation by its ID.
     * @param id reservation ID
     * @param dto updated reservation details
     * @return updated reservation if found, or HTTP 404 (Not Found)
     */
    @PutMapping("/{id}")
    public ResponseEntity<ReservationDto> updateReservation(@PathVariable Long id, @RequestBody ReservationCreateDto dto) {
        ReservationDto reservationDto = reservationService.updateReservation(id, dto);

        if (reservationDto != null) {
            return ResponseEntity.ok(reservationDto);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    /**
     * Deletes a reservation by its ID.
     * @param id reservation ID
     * @return HTTP 204 (No Content) regardless of whether the reservation existed
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deletePassenger(@PathVariable Long id) {
        reservationService.deleteReservation(id);

        return ResponseEntity.noContent().build();
    }

    /**
     * Set all reservations of a given flight as departed
     * @param flightNumber the number of a flight to set all reservations as departed
     * @return list of flights that got changed
     */
    @PutMapping("/departed/{flightNumber}")
    public List<ReservationDto> getDepartedReservations(@PathVariable String flightNumber) {

        return reservationService.markReservationsAsDeparted(flightNumber);
    }
}
